type User {
    _id: ID!
    countryCode: String!
    mobile: String!
    roles: [Role]!
    createdAt: String
    updatedAt: String
}

type Role {
    _id: ID!
    name: String!
    createdAt: String
    updatedAt: String
}

type Customer {
    _id: ID!
    email: String!
    name: String!
    gender: String!
    user: User
    createdAt: String
    updatedAt: String
}

type Otp {
    otpId: ID!
}

type Location {
    _id: ID!
    name: String!
    address: String!
    long: String!
    lat: String!
    details: String
    note: String
    contactName: String
    contactNo: String
    type: LocationType!
    user: User!
    createdAt: String
    updatedAt: String
}

enum LocationType {
    HOME
    WORK
    OTHER
}

input sendOtpInput {
    countryCode: String!
    mobile: String!
}

input registerCustomerInput {
    name: String!
    countryCode: String!
    mobile: String!
    email: String!
    gender: String!
    otpId: String!
    otp: String!
}

input createLocationInput {
    name: String!
    address: String!
    long: String!
    lat: String!
    details: String
    note: String
    contactName: String
    contactNo: String
    type: LocationType!
}

# DeliveryForm Type
type DeliveryForm {
    _id: ID!
    createdBy: User! # Only a registered user can create a form
    pickup: DeliveryLocation! # Pickup location, either saved or manual entry
    recipient: DeliveryRecipient! # Recipient details (can be guest or customer)
    itemType: ItemType! # Item type selected
    message: String # Optional message for the recipient
    createdAt: String
    updatedAt: String
}

# Location details used for Pickup & Recipient
type DeliveryLocation {
    savedLocation: Location # If user selected a saved location
    contactName: String
    contactNo: String
    address: String
    unitNo: String
    note: String
}

# Recipient details, including guest or registered customer
type DeliveryRecipient {
    savedLocation: Location # If recipient chose a saved location
    contactName: String!
    contactNo: String!
    address: String!
    unitNo: String
    note: String
    customer: Customer # If recipient is a registered customer
}

# Item Type
type ItemType {
    _id: ID!
    name: String!
    status: String!
}

# Inputs for creating a DeliveryForm
input createDeliveryFormInput {
    createdBy: ID! # Registered user creating the form
    pickup: DeliveryLocationInput! # Pickup location
    itemType: ID! # Item type selection
}

input DeliveryLocationInput {
    savedLocation: ID # ID if selected from saved locations
    contactName: String!
    contactNo: String!
    address: String!
    unitNo: String
    note: String
}

# Input for updating recipient data
input updateDeliveryRecipientInput {
    savedLocation: ID # ID if selected from saved locations
    contactName: String!
    contactNo: String!
    address: String!
    unitNo: String
    note: String
    customerId: ID # If recipient is a registered customer
}

type Query {
    getCustomer(customerId: ID!): Customer
    getLocationsByUser(userId: ID!): [Location]!
    getLocation(locationId: ID!): Location

    # New: Fetch a delivery form
    getDeliveryForm(formId: ID!): DeliveryForm
}

type Mutation {
    registerCustomer(input: registerCustomerInput): Customer
    sendOtp(input: sendOtpInput): Otp
    createLocation(input: createLocationInput): Location

    # New: Create & update delivery form
    createDeliveryForm(input: createDeliveryFormInput): DeliveryForm
    updateDeliveryData(formId: ID!, recipient: updateDeliveryRecipientInput): DeliveryForm
}

schema {
    query: Query
    mutation: Mutation
}
