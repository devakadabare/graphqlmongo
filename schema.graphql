type User {
    _id: ID!
    countryCode: String!
    mobile: String!
    roles: [Role]!
    createdAt: String
    updatedAt: String
}

type Role {
    _id: ID!
    name: String!
    createdAt: String
    updatedAt: String
}

type Customer {
    _id: ID!
    email: String!
    name: String!
    gender: String!
    user: User
    createdAt: String
    updatedAt: String
}

type Otp {
    otpId: ID!
}

type Query {
    getCustomer(customerId: ID!): Customer
}

input sendOtpInput {
    countryCode: String!
    mobile: String!
}

input registerCustomerInput {
    name: String!
    countryCode: String!
    mobile: String!
    email: String!
    gender: String!
    otpId: String!
    otp: String!
}


type Mutation {
    registerCustomer(input: registerCustomerInput): Customer
    sendOtp(input: sendOtpInput): Otp
}

schema {
    query: Query
    mutation: Mutation
}
