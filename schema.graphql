type User {
    _id: ID!
    countryCode: String!
    mobile: String!
    roles: [Role]!
    createdAt: String
    updatedAt: String
}

type Role {
    _id: ID!
    name: String!
    createdAt: String
    updatedAt: String
}

type Customer {
    _id: ID!
    email: String!
    name: String!
    gender: String!
    user: User
    createdAt: String
    updatedAt: String
}

type Otp {
    otpId: ID!
}

type Location {
    _id: ID!
    name: String!
    address: String!
    long: String!
    lat: String!
    details: String
    note: String
    contactName: String
    contactNo: String
    type: LocationType!
    user: User!
    createdAt: String
    updatedAt: String
}

enum LocationType {
    HOME
    WORK
    OTHER
}

input sendOtpInput {
    countryCode: String!
    mobile: String!
}

input registerCustomerInput {
    name: String!
    countryCode: String!
    mobile: String!
    email: String!
    gender: String!
    otpId: String!
    otp: String!
}

input createLocationInput {
    name: String!
    address: String!
    long: String!
    lat: String!
    details: String
    note: String
    contactName: String
    contactNo: String
    type: LocationType!
    userId: ID!
}

# DeliveryForm Type
type DeliveryForm {
    _id: ID!
    createdBy: Customer! # Only a registered user can create a form
    pickup: DeliveryLocation! # Pickup location, either saved or manual entry
    recipient: DeliveryRecipient! # Recipient details (can be guest or customer)
    itemType: ItemType! # Item type selected
    message: String # Optional message for the recipient
    createdAt: String
    updatedAt: String
}

# Location details used for Pickup & Recipient
type DeliveryLocation {
    savedLocation: Location # If user selected a saved location
    contactName: String
    contactNo: String
    address: String
    unitNo: String
    note: String
}

# Recipient details, including guest or registered customer
type DeliveryRecipient {
    savedLocation: Location # If recipient chose a saved location
    contactName: String!
    contactNo: String!
    address: String!
    unitNo: String
    note: String
    customer: Customer # If recipient is a registered customer
}

# Item Type
type ItemType {
    _id: ID!
    name: String!
    status: String!
}

# Inputs for creating a DeliveryForm
input createDeliveryFormInput {
    createdBy: ID! # Registered user creating the form
    pickup: DeliveryLocationInput! # Pickup location
    itemType: ID! # Item type selection
    message: String # Optional message for the recipient
}

input DeliveryLocationInput {
    savedLocation: ID # ID if selected from saved locations
    contactName: String!
    contactNo: String!
    address: String!
    unitNo: String
    note: String
}

# Input for updating recipient data
input updateDeliveryRecipientInput {
    savedLocation: ID # ID if selected from saved locations
    contactName: String!
    contactNo: String!
    address: String!
    unitNo: String
    note: String
    customerId: ID # If recipient is a registered customer
}

type Delivery {
    _id: ID!
    createdBy: Customer! # The user who created the delivery
    sender: Customer! # The sender (same as createdBy)
    recipient: Customer # The recipient (if registered, otherwise guest)
    pickup: DeliveryLocation! # Pickup details
    dropoff: DeliveryLocation! # Dropoff details
    itemType: ItemType! # The type of item being delivered
    message: String # Optional message for the recipient
    status: DeliveryStatus! # Current status of the delivery
    driver: Driver # Assigned driver, if any
    createdAt: String
    updatedAt: String
}

# Delivery Status Enum
enum DeliveryStatus {
    PENDING
    ASSIGNED
    IN_TRANSIT
    COMPLETED
    CANCELLED
}

# Driver Type (related to User)
type Driver {
    _id: ID!
    user: User! # The user record linked to the driver
    vehicleType: String!
    licenseNumber: String!
    isAvailable: Boolean!
}

# Input for Creating a Delivery
input createDeliveryInput {
    createdBy: ID! # The user creating the delivery
    sender: ID! # Sender must be a registered customer
    recipient: ID! # Recipient can be a customer or left null for guests
    deliveryType: String! # CUSTOMER-CUSTOMER, CUSTOMER-GUEST
    pickup: DeliveryLocationInput! # Pickup details
    dropoff: DeliveryLocationInput! # Dropoff details
    itemType: ID! # ID of the item type
    message: String # Optional message
}

type Query {
    getCustomer(customerId: ID!): Customer
    getLocationByUser(userId: ID!): [Location]
    getLocation(locationId: ID!): Location

    getItemTypes: [ItemType]

    # New: Fetch a delivery form
    getDeliveryForm(formId: ID!): DeliveryForm

    getDeliveriesByUserId(userId: ID!): [Delivery]
}

type Mutation {
    registerCustomer(input: registerCustomerInput): Customer
    sendOtp(input: sendOtpInput): Otp
    createLocation(input: createLocationInput): Location

    # New: Create & update delivery form
    createDeliveryForm(input: createDeliveryFormInput): DeliveryForm
    updateDeliveryData(formId: ID!, recipient: updateDeliveryRecipientInput): DeliveryForm
}

schema {
    query: Query
    mutation: Mutation
}
