type User {
    _id: ID!
    countryCode: String!
    mobile: String!
    roles: [Role]!
    createdAt: String
    updatedAt: String
}

type Role {
    _id: ID!
    name: String!
    createdAt: String
    updatedAt: String
}

type Customer {
    _id: ID!
    email: String!
    name: String!
    gender: String!
    user: User
    createdAt: String
    updatedAt: String
}

type Otp {
    otpId: ID!
}

type Location {
    _id: ID!
    name: String!
    address: String!
    long: String!
    lat: String!
    details: String
    note: String
    contactName: String
    contactNo: String
    type: LocationType!
    user: User!
    createdAt: String
    updatedAt: String
}

enum LocationType {
    HOME
    WORK
    OTHER
}

input sendOtpInput {
    countryCode: String!
    mobile: String!
}

input registerCustomerInput {
    name: String!
    countryCode: String!
    mobile: String!
    email: String!
    gender: String!
    otpId: String!
    otp: String!
}

input createLocationInput {
    name: String!
    address: String!
    long: String!
    lat: String!
    details: String
    note: String
    contactName: String
    contactNo: String
    type: LocationType!
}

type Query {
    getCustomer(customerId: ID!): Customer
    getLocationsByUser(userId: ID!): [Location]!
    getLocation(locationId: ID!): Location
}

type Mutation {
    registerCustomer(input: registerCustomerInput): Customer
    sendOtp(input: sendOtpInput): Otp
    createLocation(input: createLocationInput): Location
}

schema {
    query: Query
    mutation: Mutation
}
